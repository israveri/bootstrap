#! /usr/bin/env ruby

require 'thor'

class Setup < Thor
  PACKAGES = [
    'exa',
    'command-not-found',
    'fzf',
    'hstr',
    'httpie',
    'tmux',
    'tmuxp',
    'vim',
    'zoxide',
    'zsh',
    'zsh-antigen'
  ]

  desc 'all', 'Setup everything'
  def all
    puts "-> Bootstraping development environment"
    puts ""

    dotfiles
    packages
    configs

    puts "-> Done. Don't forget to `reload` the shell to apply changes!"
  end

  desc 'dotfiles', 'Links dotfiles to your home directory'
  def dotfiles
    puts "-> Linking dotfiles"

    create_symlinks

    puts ""
  end

  desc 'packages', 'Installs applications from official repository'
  def packages
    puts "-> Installing packages"

    update_packages
    upgrade_packages
    install_packages

    puts ""
  end

  desc 'configs', 'Links application config files to ~/.config folder'
  def configs
    puts "-> Linking configs"

    create_configs

    puts ""
  end

  private

  def create_symlinks
    Dir.children('dotfiles').each do |filename|
      print "[ ] Symlinking #{filename}"

      if File.exist?("#{Dir.home}/#{filename}")
        File.delete("#{Dir.home}/#{filename}")
      end

      File.symlink(
        "#{Dir.pwd}/dotfiles/#{filename}",
        "#{Dir.home}/#{filename}"
      )

      print "\r[✔] Symlinking #{filename}"
      puts ""
    end
  end

  def update_packages
      print "[ ] Updating available packages list"

      system("sudo apt update", [:out, :err] => File::NULL)

      print "\r[✔] Updating available packages list"
      puts ""
  end

  def upgrade_packages
    print "[ ] Upgrading installed packages"

    system("sudo apt upgrade", [:out, :err] => File::NULL)

    print "\r[✔] Upgrading installed packages"
    puts ""
  end

  def install_packages
    print "[ ] Installing packages"

    system "sudo apt install --yes #{PACKAGES.join(' ')}", [:out, :err] => File::NULL

    print "\r[✔] Installing packages"
    puts ""
  end

  def create_configs
    Dir.glob("configs/*")
    .select { |f| File.directory? f }
    .each do |dir|
        print "[ ] Symlinking #{File.basename dir}"

        if File.exist? "#{Dir.home}/.config/#{File.basename dir}"
          File.delete "#{Dir.home}/.config/#{File.basename dir}"
        end

        File.symlink(
          "#{Dir.pwd}/#{dir}",
          "#{Dir.home}/.config/#{File.basename dir}"
        )

        print "\r[✔] Symlinking #{File.basename dir}"
      end

      puts ""
  end
end

# Little trick to prompt the user for sudo
# to cache the authentication so we don't
# need to prompt the password in the middle
# of execution and mess up the pretty output
system("sudo env 1> /dev/null")

Setup.start
